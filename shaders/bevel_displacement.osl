// shader bevel(
//     output float resultF = 0,
//     //output float core = 0
// )
// {
//     resultF = 1.0 * (1 + sin(P.x*P.y));
//     //resultF = 0.05;
// }

// shader bevel(
//     float scale = 0.05,
//     output float resultF = 0
// )
// {
//     normal Nf = normalize(N);
//     normal dNdx = Dx(Nf);
//     normal dNdy = Dy(Nf);

//     float curvature = length(dNdx) + length(dNdy);

//     resultF = smoothstep(0.0, 1.0, curvature) * scale;
// }

shader number_disp(
    string disp_map = "",
    output float resultF = 0.0)
{
    if (disp_map != "")
        //resultF = texture(disp_map, u, v);
        //resultF = texture(disp_map, u, 1 - v);
        resultF = texture(disp_map, u, clamp(v, 0.01, 0.99));


}
